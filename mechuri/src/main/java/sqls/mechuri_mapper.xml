<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hk.mechuri">

<!-- 김재원 -->
<select id='productlist' resultType='productDto' parameterType="Map">
SELECT PRODUCT_NO,PRODUCT_NAME,PRODUCT_BRAND,PRODUCT_ML,PRODUCT_PRICE,PRODUCT_INGRE,
ROUND((SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO),3) AS PRODUCT_POINT,
(SELECT COUNT(*) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) AS PRODUCT_POINTCOUNT,
DENSE_RANK() OVER(ORDER BY (SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) DESC NULLS LAST) AS PRODUCT_RANK
FROM PRODUCT
ORDER BY PRODUCT_POINT DESC NULLS LAST, PRODUCT_NAME ASC
</select>

<select id="applyFilter" resultType="productDto" parameterType="Map">
SELECT PRODUCT_NO,PRODUCT_NAME,PRODUCT_AGE,PRODUCT_BRAND,PRODUCT_ML,PRODUCT_PRICE,PRODUCT_INGRE,
ROUND((SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO),3) AS PRODUCT_POINT,
(SELECT COUNT(*) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) AS PRODUCT_POINTCOUNT,
DENSE_RANK() OVER(ORDER BY (SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) DESC NULLS LAST) AS PRODUCT_RANK
FROM PRODUCT
WHERE PRODUCT_FLAG='Y'
<choose>
	<when test="(filter_age10==null and filter_age20==null and filter_age30==null and filter_age40==null and filter_age50==null) and (filter_genderF!=null or filter_genderM!=null" >
		AND PRODUCT_GENDER IN (#{filter_genderF},#{filter_genderM})
	</when>
	<when test="(filter_age10!=null and filter_age20!=null and filter_age30!=null and filter_age40!=null and filter_age50!=null)and (filter_genderF==null and filter_genderM==null)">
		AND PRODUCT_AGE IN (#{filter_age10},#{filter_age20},#{filter_age30},#{filter_age40},#{filter_age50})
	</when>
	<otherwise>
		AND PRODUCT_AGE IN (#{filter_age10},#{filter_age20},#{filter_age30},#{filter_age40},#{filter_age50})
		AND PRODUCT_GENDER IN (#{filter_genderF},#{filter_genderM})
	</otherwise>
</choose>
ORDER BY PRODUCT_POINT DESC NULLS LAST, PRODUCT_NAME ASC
</select>

<select id="doFilter" resultType='productDto' parameterType="Map">
SELECT PRODUCT_NO,PRODUCT_NAME,PRODUCT_BRAND,PRODUCT_ML,PRODUCT_PRICE,PRODUCT_INGRE,
ROUND((SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO),3) AS PRODUCT_POINT,
(SELECT COUNT(*) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) AS PRODUCT_POINTCOUNT,
DENSE_RANK() OVER(ORDER BY (SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) DESC NULLS LAST) AS PRODUCT_RANK
FROM PRODUCT
WHERE PRODUCT_FLAG='Y'
	<choose>
		<when test="ages != null and genders != null">
			AND PRODUCT_AGE IN
			<foreach collection="ages" item="age" open="(" close=")" separator=",">
				#{age}
			</foreach>
			AND PRODUCT_GENDER IN
			<foreach collection="genders" item="gender" open="(" close=")" separator=",">
				#{gender}
			</foreach>
		</when>
		<when test="ages == null and genders != null">
			AND PRODUCT_GENDER IN
			<foreach collection="genders" item="gender" open="(" close=")" separator=",">
				#{gender}
			</foreach>
		</when>
		<when test="ages != null and genders == null">
			AND PRODUCT_AGE IN
			<foreach collection="ages" item="age" open="(" close=")" separator=",">
				#{age}
			</foreach>
		</when>
		<otherwise>
			PRODUCT_DJFALG = NULL OR PRODUCT_DJFLAG = 'Y'
		</otherwise>
	</choose>
ORDER BY PRODUCT_POINT DESC NULLS LAST, PRODUCT_NAME ASC
</select>



<!-- 제품 상세페이지 보기 -->
<select id="productDetail" resultType="productDto" parameterType="int">
SELECT PRODUCT_NO,PRODUCT_NAME,PRODUCT_BRAND,PRODUCT_ML,PRODUCT_PRICE,PRODUCT_CONTS,PRODUCT_BRAND,PRODUCT_COMPNO,PRODUCT_CATELNAME,PRODUCT_CATESNAME,
PRODUCT_SKINTYPE,PRODUCT_AGE,PRODUCT_GENDER,PRODUCT_INGRE,PRODUCT_FLAG,
ROUND((SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO),2) AS PRODUCT_POINT,
(SELECT COUNT(*) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) AS PRODUCT_POINTCOUNT,
DENSE_RANK() OVER(ORDER BY (SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) DESC NULLS LAST) AS PRODUCT_RANK
FROM PRODUCT
WHERE PRODUCT_NO = #{product_no}
</select>
<!-- 별점 점수별 인원수 세기 -->
<select id="reviewDetailPoint" resultType="reviewDto" parameterType="int">
SELECT (SELECT COUNT(*) FROM REVIEW WHERE (REVIEW_POINT=1 OR REVIEW_POINT=1.5) AND REVIEW_PRODUCTNO=#{product_no}) AS REV1COUNT,
 (SELECT COUNT(*) FROM REVIEW WHERE (REVIEW_POINT=2 OR REVIEW_POINT=2.5) AND REVIEW_PRODUCTNO=#{product_no}) AS REV2COUNT,
(SELECT COUNT(*) FROM REVIEW WHERE (REVIEW_POINT=3 OR REVIEW_POINT=3.5) AND REVIEW_PRODUCTNO=#{product_no}) AS REV3COUNT,
(SELECT COUNT(*) FROM REVIEW WHERE (REVIEW_POINT=4 OR REVIEW_POINT=4.5) AND REVIEW_PRODUCTNO=#{product_no}) AS REV4COUNT,
(SELECT COUNT(*) FROM REVIEW WHERE (REVIEW_POINT=5 OR REVIEW_POINT=5.5) AND REVIEW_PRODUCTNO=#{product_no}) AS REV5COUNT
FROM REVIEW
WHERE REVIEW_PRODUCTNO = #{product_no} AND ROWNUM=1
</select>
<!-- 상세페이지 제품의 리뷰보기 -->
<select id="productReview" resultType="reviewDto" parameterType="int">
SELECT REVIEW_NO, REVIEW_CONTS, review_memberid, (SELECT MEMBERS.MEM_NICK FROM MEMBERS WHERE MEMBERS.MEM_ID=REVIEW.REVIEW_MEMBERID) AS REVIEW_NICK,
REVIEW_POINT,REVIEW_REGDATE,REVIEW_STOREDFILE 
FROM REVIEW
WHERE REVIEW_PRODUCTNO = #{product_no}
</select>
<!-- 상세페이지 제품의 성분보기 -->
<select id="productIngre" resultType="ingreDto" parameterType="Map">
SELECT INGRE_KORNAME,INGRE_ENGNAME,INGRE_CONTS,INGRE_DANGER,INGRE_GRADE,INGRE_SKINTYPE,INGRE_20,INGRE_20CONTS,INGRE_ALLERGY 
FROM INGRE
WHERE INGRE_NO IN 
	<foreach collection="product_ingre" item="ingre" open="(" close=")" separator=",">
		#{ingre}
	</foreach>
</select>


<!-- 커뮤니티 리스트 출력 쿼리 -->
 <select id='boardlist2' resultType='boardDto' parameterType='String'>
 	SELECT RN,BOARD_NO,BOARD_NICK,BOARD_TITLE,BOARD_CONTS,BOARD_REGDATE,BOARD_COUNT,BOARD_FILENO,
	BOARD_ORIGINFILE,BOARD_STOREDFILE,BOARD_FILEREGDATE,BOARD_FILESIZE,
	DECODE(ROUND(SYSDATE-BOARD_REGDATE),0,'true','false') AS BOARD_NEW FROM
	(SELECT ROW_NUMBER() OVER (ORDER BY BOARD_NO DESC) AS RN,BOARD_NO,BOARD_NICK,BOARD_TITLE,BOARD_CONTS,BOARD_REGDATE,BOARD_COUNT,BOARD_FILENO,
	BOARD_ORIGINFILE,BOARD_STOREDFILE,BOARD_FILEREGDATE,BOARD_FILESIZE,
	BOARD_NEW FROM BOARD ORDER BY BOARD_NO DESC ) 
	WHERE CEIL(RN/8)=#{board_pnum}
</select>

	<!-- 커뮤니티 글추가 -->
<insert id="insertBoard" parameterType='Map'>
	INSERT INTO BOARD(BOARD_NO,BOARD_NICK,BOARD_TITLE,BOARD_CONTS,BOARD_REGDATE,BOARD_FILENO,BOARD_ORIGINFILE,BOARD_STOREDFILE,BOARD_FILEREGDATE,BOARD_FILESIZE)
	VALUES(BOARD_SEQ.NEXTVAL,#{board_nick},#{board_title},#{board_conts},SYSDATE,BOARDFILE_SEQ.NEXTVAL,#{board_originfile},#{board_storedfile},SYSDATE,#{board_filesize})
</insert>

	<!-- 커뮤니티 디테일 -->
<select id="getboard" resultType='BoardDto' parameterType="int">
	 	SELECT BOARD_NO,BOARD_NICK,BOARD_TITLE,BOARD_CONTS,BOARD_REGDATE,BOARD_COUNT,BOARD_COUNT,BOARD_FILENO,
	BOARD_ORIGINFILE,BOARD_STOREDFILE,BOARD_FILEREGDATE,BOARD_FILESIZE FROM BOARD WHERE BOARD_NO=#{board_no}
</select>

	<!-- 커뮤니티 상세글 수정 -->
<update id="updateboard" parameterType='Map'>
	UPDATE BOARD SET BOARD_TITLE=#{board_title},BOARD_CONTS=#{board_conts},BOARD_REGDATE=SYSDATE,
	BOARD_ORIGINFILE=#{board_originfile},BOARD_STOREDFILE=#{board_storedfile},BOARD_FILESIZE=#{board_filesize} WHERE BOARD_NO=#{board_no}
</update>

<insert id="replyinsert" parameterType="replyDto">
INSERT INTO REPLY VALUES(REPLY_SEQ.NEXTVAL, #{reply_communo}, SYSDATE, #{reply_nick},#{reply_conts}, 0, NULL, NULL, NULL, NULL )
</insert>
<select id="replylist" resultType="replyDto" parameterType="int">
	SELECT REPLY_NICK, REPLY_CONTS,REPLY_REGDATE,DECODE(ROUND(SYSDATE-REPLY_REGDATE),0,'true','false') AS REPLY_NEW 
	FROM REPLY WHERE REPLY_COMMUNO = #{board_no}
</select>

<update id="readcount" parameterType="int">
	UPDATE BOARD SET BOARD_COUNT=BOARD_COUNT+1 WHERE BOARD_NO=#{board_no}
</update>
	
	
<select id="delboard" resultType="boardDto" parameterType="int">
	DELETE FROM BOARD WHERE BOARD_NO=#{board_no}
</select>

	<!-- 커뮤니티 첨부파일
 <insert id="insertFileInfo" parameterType='boardDto'>
	INSERT INTO BOARD(BOARD_SEQ.NEXTVAL,BOARD_NICK,BOARD_TITLE,BOARD_CONTS,BOARD_REGDATE,BOARD_COUNT,BOARD_FILENO,
	BOARD_ORIGINFILE,BOARD_STOREDFILE,BOARD_FILEREGDATE,BOARD_FILESIZE)
	 UPDATE BOARD SET BOARD_FILENO=BOARDFILE_SEQ.NEXTVAL,BOARD_ORIGINFILE=#{board_originfile},BOARD_STOREDFILE=#{board_storedfile},
	 BOARD_FILEREGDATE=SYSDATE, BOARD_FILESIZE=#{board_filesize} WHERE BOARD_NO=#{board_no}
	 
	 (BOARD_FILENO,BOARD_ORIIGINFILE, BOARD_STOREDFILE, BOARD_FILEREGDATE,BOARD_FILESIZE) 
	 VALUES(BOARDFILE_SEQ.NEXTVAL,#{board_originfile},#{board_storedfile},SYSDATE,#{board_filesize}) WHERE 
	 
</insert>  -->

<select id="pcount" resultType="int">    <!-- paging 하는법... -->
		SELECT CEIL(COUNT(*)/8) FROM BOARD
</select>






<insert id="signUpBoard" parameterType='membersDto'>
	INSERT INTO MEMBERS(MEM_NO,MEM_ID,MEM_PW,MEM_STATUS,MEM_BRAND,MEM_NAME,MEM_NICK,MEM_PHONE,MEM_EMAIL,
MEM_POST,MEM_ADDR1,MEM_ADDR2,MEM_REGDATE,MEM_DELDATE,MEM_DELFLAG,MEM_APPRFLAG,MEM_HOMEPAGE) 
	VALUES(MEMBERS_SEQ.NEXTVAL,#{mem_id},#{mem_pw},'C','브랜드명',#{mem_name},#{mem_nick},#{mem_phone},'이메일1','포스트'
	,'주소1','주소2',SYSDATE,SYSDATE,'N','N','홈페이지')
</insert>

<insert id="compSignUpBoard" parameterType="membersDto">
	INSERT INTO MEMBERS(MEM_NO,MEM_ID,MEM_PW,MEM_STATUS,MEM_BRAND,MEM_NAME,MEM_NICK,MEM_PHONE,MEM_EMAIL,
MEM_POST,MEM_ADDR1,MEM_ADDR2,MEM_REGDATE,MEM_DELDATE,MEM_DELFLAG,MEM_APPRFLAG,MEM_HOMEPAGE,MEM_OTHERS01)
	VALUES(MEMBERS_SEQ.NEXTVAL,#{mem_id},#{mem_pw},'C',#{mem_brand},#{mem_name},'닉',#{mem_phone},#{mem_email},#{mem_post},#{mem_addr1},#{mem_addr2},
	SYSDATE,SYSDATE,'N','N',#{mem_homepage},#{mem_others01})
</insert>

<select id="login_check" resultType="String" parameterType="membersDto">
	SELECT MEM_NAME FROM MEMBERS WHERE MEM_ID LIKE #{mem_id}
	
</select>

<select id="viewMember" resultType="membersDto">
	SELECT * FROM MEMBERS WHERE MEM_ID=#{mem_id}
</select>

</mapper>


