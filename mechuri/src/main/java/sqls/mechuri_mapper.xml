<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hk.mechuri">

<!-- 김재원 -->

<!-- 리스트 출력하는 쿼리 -->
<select id='productlist' resultType='productDto' parameterType="Map">
SELECT PRODUCT_NO,PRODUCT_NAME,PRODUCT_BRAND,PRODUCT_ML,PRODUCT_PRICE,PRODUCT_INGRE,PRODUCT_PRICE,
ROUND((SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO),3) AS PRODUCT_POINT,
ROUND((SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO),1) AS PRODUCT_POINT2,
(SELECT COUNT(*) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) AS PRODUCT_POINTCOUNT,
DENSE_RANK() OVER(ORDER BY (SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) DESC NULLS LAST) AS PRODUCT_RANK
FROM PRODUCT
WHERE PRODUCT_FLAG='Y' AND PRODUCT_DJFLAG IS NULL
ORDER BY PRODUCT_POINT DESC NULLS LAST, PRODUCT_NAME ASC
</select>

<select id='brandlist' resultType='productDto' parameterType="String">
SELECT PRODUCT_NO,PRODUCT_NAME,PRODUCT_BRAND,PRODUCT_ML,PRODUCT_PRICE,PRODUCT_INGRE,PRODUCT_PRICE,
ROUND((SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO),3) AS PRODUCT_POINT,
ROUND((SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO),1) AS PRODUCT_POINT2,
(SELECT COUNT(*) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) AS PRODUCT_POINTCOUNT,
DENSE_RANK() OVER(ORDER BY (SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) DESC NULLS LAST) AS PRODUCT_RANK
FROM PRODUCT
WHERE PRODUCT_FLAG='Y' AND PRODUCT_DJFLAG IS NULL AND PRODUCT_BRAND=#{product_brand}
ORDER BY PRODUCT_POINT DESC NULLS LAST, PRODUCT_NAME ASC
</select>

<!-- 필터 적용하는 쿼리 -->
<select id="doFilter" resultType="productDto" parameterType="Map">
SELECT PRODUCT_NO,PRODUCT_NAME,PRODUCT_AGE,PRODUCT_BRAND,PRODUCT_ML,PRODUCT_PRICE,PRODUCT_INGRE,
ROUND((SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO),3) AS PRODUCT_POINT,
(SELECT COUNT(*) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) AS PRODUCT_POINTCOUNT,
DENSE_RANK() OVER(ORDER BY (SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) DESC NULLS LAST) AS PRODUCT_RANK
FROM PRODUCT
WHERE PRODUCT_FLAG='Y'
		<foreach collection="ages" item="age" open="AND PRODUCT_AGE IN (" close=")" separator=",">
			#{age, jdbcType=VARCHAR}
		</foreach>
		<foreach collection="genders" item="gender" open="AND PRODUCT_GENDER IN(" close=")" separator=",">
			#{gender, jdbcType=VARCHAR}
		</foreach>
		<foreach collection="skins" item="skin" open="AND PRODUCT_SKINTYPE IN(" close=")" separator=",">
			#{skin, jdbcType=VARCHAR}
		</foreach>
		<choose>
			<when test="catelname != null and catesname != null">
				AND (PRODUCT_CATELNAME=#{catelname, jdbcType=VARCHAR} AND PRODUCT_CATESNAME=#{catesname, jdbcType=VARCHAR})
			</when>
			<when test="catelname != null and catesname == null">
				AND PRODUCT_CATELNAME=#{catelname, jdbcType=VARCHAR} 
			</when>
			<otherwise>
				
			</otherwise>
		</choose>
ORDER BY PRODUCT_POINT DESC NULLS LAST, PRODUCT_NAME ASC
</select>


<!-- 제품상세페이지 보는 쿼리!! -->
<!-- 제품 상세페이지 보기 -->
<select id="productDetail" resultType="productDto" parameterType="int">
	SELECT PRODUCT_NO,PRODUCT_NAME,PRODUCT_BRAND,PRODUCT_ML,PRODUCT_PRICE,PRODUCT_CONTS,PRODUCT_BRAND,PRODUCT_COMPNO,PRODUCT_CATELNAME,PRODUCT_CATESNAME,
	PRODUCT_SKINTYPE,PRODUCT_AGE,PRODUCT_GENDER,PRODUCT_INGRE,PRODUCT_FLAG,PRODUCT_STOREDFILE,
	ROUND((SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO),2) AS PRODUCT_POINT,
	(SELECT COUNT(*) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) AS PRODUCT_POINTCOUNT,
	DENSE_RANK() OVER(ORDER BY (SELECT AVG(REVIEW_POINT) FROM REVIEW WHERE REVIEW.REVIEW_PRODUCTNO=PRODUCT.PRODUCT_NO) DESC NULLS LAST) AS PRODUCT_RANK
	FROM PRODUCT
	WHERE PRODUCT_NO = #{product_no}
</select>
<!-- 별점 점수별 인원수 세기 -->
<select id="reviewDetailPoint" resultType="reviewDto" parameterType="int">
	SELECT (SELECT COUNT(*) FROM REVIEW WHERE (REVIEW_POINT=1 OR REVIEW_POINT=1.5) AND REVIEW_PRODUCTNO=#{product_no}) AS REV1COUNT,
	 (SELECT COUNT(*) FROM REVIEW WHERE (REVIEW_POINT=2 OR REVIEW_POINT=2.5) AND REVIEW_PRODUCTNO=#{product_no}) AS REV2COUNT,
	(SELECT COUNT(*) FROM REVIEW WHERE (REVIEW_POINT=3 OR REVIEW_POINT=3.5) AND REVIEW_PRODUCTNO=#{product_no}) AS REV3COUNT,
	(SELECT COUNT(*) FROM REVIEW WHERE (REVIEW_POINT=4 OR REVIEW_POINT=4.5) AND REVIEW_PRODUCTNO=#{product_no}) AS REV4COUNT,
	(SELECT COUNT(*) FROM REVIEW WHERE (REVIEW_POINT=5 OR REVIEW_POINT=5.5) AND REVIEW_PRODUCTNO=#{product_no}) AS REV5COUNT
	FROM REVIEW
	WHERE REVIEW_PRODUCTNO = #{product_no} AND ROWNUM=1
</select>
<!-- 상세페이지 제품의 리뷰보기 -->
<select id="productReview" resultType="reviewDto" parameterType="int">
	SELECT REVIEW_NO, REVIEW_CONTS, REVIEW_MEMBERNICK, (SELECT MEMBERS.MEM_NICK FROM MEMBERS WHERE MEMBERS.MEM_NICK=REVIEW.REVIEW_MEMBERNICK) AS REVIEW_NICK,
	REVIEW_POINT,REVIEW_REGDATE,REVIEW_STOREDFILE 
	FROM REVIEW
	WHERE REVIEW_PRODUCTNO = #{product_no}
	ORDER BY REVIEW_NO ASC
</select>
<!-- 상세페이지 제품의 성분보기 -->
<select id="productIngre" resultType="ingreDto" parameterType="Map">
	SELECT INGRE_KORNAME,INGRE_ENGNAME,INGRE_CONTS,INGRE_DANGER,INGRE_GRADE,INGRE_SKINTYPE,INGRE_20,INGRE_20CONTS,INGRE_ALLERGY 
	FROM INGRE
	WHERE INGRE_NO IN 
	<foreach collection="product_ingre" item="ingre" open="(" close=")" separator=",">
		#{ingre}
	</foreach>
</select>


<!-- 리뷰용 쿼리!! -->
<!-- 리뷰작성시 작성되는 리뷰의 대상이 되는 제품정보 1개를 출력 -->
<select id="getOneProductInfo" resultType="productDto" parameterType="int">
	SELECT PRODUCT_NO, PRODUCT_NAME, PRODUCT_BRAND, PRODUCT_PRICE, PRODUCT_CONTS, PRODUCT_CATELNAME, PRODUCT_CATESNAME, PRODUCT_ML
	FROM PRODUCT
	WHERE PRODUCT_NO = #{pNo}
</select>

<insert id="insertReview" parameterType="Map">
	INSERT INTO REVIEW(REVIEW_NO,REVIEW_MEMBERNICK,REVIEW_PRODUCTNO,REVIEW_CONTS,REVIEW_POINT,REVIEW_REGDATE,REVIEW_FILENO,REVIEW_ORIGINFILE,REVIEW_STOREDFILE,REVIEW_FILESIZE,REVIEW_FILEREGDATE)
	VALUES(REVIEW_SEQ.NEXTVAL,#{review_membernick},#{review_productno}, #{review_conts},#{review_point},SYSDATE,REVIEWFILE_SEQ.NEXTVAL,#{review_originfile},#{review_storedfile},#{review_filesize},SYSDATE)
</insert>

<delete id="deleteReview" parameterType="reviewDto">
	DELETE FROM REVIEW
	WHERE REVIEW_NO = #{	review_no}
</delete>


<!-- 리뷰용 세션용 쿼리!! -->
<!-- 네이버 로그인 세션을 확인하는 쿼리 -->
<select id="existNaver" resultType="membersDto" parameterType="membersDto">
	SELECT MEM_ID, MEM_NAME, MEM_NAVERID, MEM_NICK FROM MEMBERS
	WHERE MEM_ID = #{mem_id}
</select>

<select id="forNaverSession" resultType="membersDto" parameterType="String">
	SELECT MEM_NO,MEM_NAME,MEM_NICK,MEM_STATUS,MEM_DELFLAG FROM MEMBERS
	WHERE MEM_ID = #{naverEmail}
</select>

<!-- 김재원 끝끝끝 김재원 끝끝끝 김재원 끝끝끝 김재원 끝끝끝 김재원 끝끝끝 김재원 끝끝끝 -->

<!-- 커뮤니티 리스트 출력 쿼리 -->
 <select id='boardlist2' resultType='boardDto' parameterType='String'>
 	SELECT RN,BOARD_NO,BOARD_NICK,BOARD_TITLE,BOARD_CONTS,BOARD_REGDATE,BOARD_COUNT,BOARD_FILENO,
	BOARD_ORIGINFILE,BOARD_STOREDFILE,BOARD_FILEREGDATE,BOARD_FILESIZE,
	DECODE(ROUND(SYSDATE-BOARD_REGDATE),0,'true','false') AS BOARD_NEW FROM
	(SELECT ROW_NUMBER() OVER (ORDER BY BOARD_NO DESC) AS RN,BOARD_NO,BOARD_NICK,BOARD_TITLE,BOARD_CONTS,BOARD_REGDATE,BOARD_COUNT,BOARD_FILENO,
	BOARD_ORIGINFILE,BOARD_STOREDFILE,BOARD_FILEREGDATE,BOARD_FILESIZE,
	BOARD_NEW FROM BOARD ORDER BY BOARD_NO DESC ) 
	WHERE CEIL(RN/8)=#{board_pnum}
</select>

	<!-- 커뮤니티 글추가 -->
<insert id="insertBoard" parameterType='Map'>
	INSERT INTO BOARD(BOARD_NO,BOARD_NICK,BOARD_TITLE,BOARD_CONTS,BOARD_REGDATE,BOARD_COUNT,BOARD_FILENO,BOARD_ORIGINFILE,BOARD_STOREDFILE,BOARD_FILEREGDATE,BOARD_FILESIZE)
	VALUES(BOARD_SEQ.NEXTVAL,#{board_nick},#{board_title},#{board_conts},SYSDATE,0,BOARDFILE_SEQ.NEXTVAL,#{board_originfile},#{board_storedfile},SYSDATE,#{board_filesize})
</insert>

	<!-- 커뮤니티 디테일 -->
<select id="getboard" resultType='BoardDto' parameterType="int">
	 	SELECT BOARD_NO,BOARD_NICK,BOARD_TITLE,BOARD_CONTS,BOARD_REGDATE,BOARD_COUNT,BOARD_COUNT,BOARD_FILENO,
	BOARD_ORIGINFILE,BOARD_STOREDFILE,BOARD_FILEREGDATE,BOARD_FILESIZE FROM BOARD WHERE BOARD_NO=#{board_no}
</select>

	<!-- 커뮤니티 상세글 수정 -->
<update id="updateboard" parameterType='Map'>
	UPDATE BOARD SET BOARD_TITLE=#{board_title},BOARD_CONTS=#{board_conts},BOARD_REGDATE=SYSDATE
	<if test="board_originfile != 'empty'">
	,BOARD_ORIGINFILE=#{board_originfile},BOARD_STOREDFILE=#{board_storedfile},BOARD_FILESIZE=#{board_filesize} 
	</if>
	WHERE BOARD_NO=#{board_no}
</update>

<insert id="replyinsert" parameterType="replyDto">
	INSERT INTO REPLY VALUES(REPLY_SEQ.NEXTVAL, #{reply_communo}, SYSDATE, #{reply_nick},#{reply_conts}, 0, NULL, NULL, NULL, NULL )
</insert>
<select id="replylist" resultType="replyDto" parameterType="int">
	SELECT REPLY_NO,REPLY_NICK, REPLY_CONTS,REPLY_REGDATE,DECODE(ROUND(SYSDATE-REPLY_REGDATE),0,'true','false') AS REPLY_NEW 
	FROM REPLY WHERE REPLY_COMMUNO = #{board_no} 
</select>
<select id="delreply" resultType="replyDto" parameterType="int">
	DELETE FROM REPLY WHERE REPLY_NO=#{reply_no}
</select>

<update id="readcount" parameterType="int">
	UPDATE BOARD SET BOARD_COUNT=BOARD_COUNT+1 WHERE BOARD_NO=#{board_no}
</update>
	
	
<select id="delboard" resultType="boardDto" parameterType="int">
	DELETE FROM BOARD WHERE BOARD_NO=#{board_no}
</select>

	<!-- 커뮤니티 첨부파일
 <insert id="insertFileInfo" parameterType='boardDto'>
	INSERT INTO BOARD(BOARD_SEQ.NEXTVAL,BOARD_NICK,BOARD_TITLE,BOARD_CONTS,BOARD_REGDATE,BOARD_COUNT,BOARD_FILENO,
	BOARD_ORIGINFILE,BOARD_STOREDFILE,BOARD_FILEREGDATE,BOARD_FILESIZE)
	 UPDATE BOARD SET BOARD_FILENO=BOARDFILE_SEQ.NEXTVAL,BOARD_ORIGINFILE=#{board_originfile},BOARD_STOREDFILE=#{board_storedfile},
	 BOARD_FILEREGDATE=SYSDATE, BOARD_FILESIZE=#{board_filesize} WHERE BOARD_NO=#{board_no}
	 
	 (BOARD_FILENO,BOARD_ORIIGINFILE, BOARD_STOREDFILE, BOARD_FILEREGDATE,BOARD_FILESIZE) 
	 VALUES(BOARDFILE_SEQ.NEXTVAL,#{board_originfile},#{board_storedfile},SYSDATE,#{board_filesize}) WHERE 
	 
</insert>  -->

<select id="pcount" resultType="int">    <!-- paging 하는법... -->
		SELECT CEIL(COUNT(*)/8) FROM BOARD
</select>


<!--                      검색기능                        rNum:rownum약자                        -->
<select id="listSearch" resultType="productDto" parameterType="com.hk.mechuri.list.SearchCriteria">
		SELECT PRODUCT_NO, PRODUCT_NAME, PRODUCT_BRAND, PRODUCT_CATELNAME, PRODUCT_CATESNAME, PRODUCT_PRICE
			FROM (
			SELECT PRODUCT_NO, PRODUCT_NAME, PRODUCT_BRAND, PRODUCT_CATELNAME, PRODUCT_CATESNAME, PRODUCT_PRICE, ROW_NUMBER() OVER(ORDER BY PRODUCT_NO DESC) AS rNum
			FROM PRODUCT 
				<include refid="search"></include>
			)
			WHERE rNum BETWEEN #{rowStart} and #{rowEnd}
			ORDER BY PRODUCT_NO DESC
</select>


<sql id="search">
	<if test="searchType != null">
		<if test="searchType == 'n'.toString()">where product_name like '%' || #{keyword} || '%'</if>
		<if test="searchType == 'b'.toString()">where product_brand like '%' || #{keyword} || '%'</if>
		<if test="searchType == 'cl'.toString()">where product_catelname like '%' || #{keyword} || '%'</if>	
	</if>
</sql>

<select id="countSearch" resultType="int">
 select count(product_no)
  from product
   <include refid="search"></include>
<![CDATA[
   where product_no > 0
]]>
</select>



<insert id="signUpBoard" parameterType='membersDto'>
	INSERT INTO MEMBERS(MEM_NO,MEM_ID,MEM_PW,MEM_STATUS,MEM_NAME,MEM_NICK,MEM_PHONE,MEM_REGDATE,MEM_DELFLAG,MEM_APPRFLAG) 
	VALUES(MEMBERS_SEQ.NEXTVAL,#{mem_id},#{mem_pw},'M',#{mem_name},#{mem_nick},#{mem_phone},SYSDATE,'N','Y')
</insert>

<insert id="compSignUpBoard" parameterType="membersDto">
	INSERT INTO MEMBERS(MEM_NO,MEM_ID,MEM_PW,MEM_STATUS,MEM_BRAND,MEM_NAME,MEM_NICK,MEM_PHONE,MEM_EMAIL,
MEM_POST,MEM_ADDR1,MEM_ADDR2,MEM_REGDATE,MEM_DELDATE,MEM_DELFLAG,MEM_APPRFLAG,MEM_HOMEPAGE)
	VALUES(MEMBERS_SEQ.NEXTVAL,#{mem_id},#{mem_pw},'C',#{mem_brand},#{mem_name},'닉',#{mem_phone},#{mem_email},#{mem_post},#{mem_addr1},#{mem_addr2},
	SYSDATE,NULL,'N','N',#{mem_homepage})
</insert>

<select id="login_check" resultType="String" parameterType="membersDto">
	SELECT MEM_NAME FROM MEMBERS WHERE MEM_ID=#{mem_id} AND MEM_PW=#{mem_pw} 
	
</select> 

<select id="viewMember" resultType="membersDto">
	SELECT * FROM MEMBERS WHERE MEM_ID=#{mem_id}
</select>

<select id="delflagCheck" parameterType="membersDto" resultType="int">
	SELECT count(*) FROM MEMBERS WHERE MEM_ID=#{mem_id} AND MEM_DELFLAG='N' AND MEM_APPRFLAG='Y'
</select>

<select id = 'idcheck' resultType='membersDto' parameterType='String'>
		SELECT MEM_ID 
		FROM MEMBERS 
		WHERE MEM_id= #{mem_id}
</select>

<!-- 아이디 찾기 -->
	<select id="memIdSearch" parameterType="Map" resultType="String">
		SELECT MEM_ID
  		FROM MEMBERS
  		WHERE MEM_NAME = #{mem_name} AND MEM_PHONE = #{mem_phone}
	</select>

<!-- 비밀번호 찾기 -->
	<select id="findpwForm" resultType="membersDto" parameterType="membersDto">
		SELECT MEM_PW FROM MEMBERS WHERE
		MEM_ID=#{mem_id} and MEM_NAME=#{mem_name}
	</select>

<!-- 비밀번호 변경 -->	
	<update id="updatePw" parameterType="membersDto">
		UPDATE MEMBERS SET MEM_PW=#{mem_pw} WHERE MEM_ID=#{mem_id} AND MEM_NAME=#{mem_name}
	</update>
	

<!-- 황승희 황승희 황승희 황승희 황승희 황승희 황승희 황승희 황승희 황승희 황승희 황승희 황승희 시작 -->
<!-- 쪽지 보내기 쿼리 -->
<insert id="sendMessage2" parameterType="productDto">
	<![CDATA[
		INSERT INTO MSG (MSG_NO, MSG_TITLE, MSG_CONTS, MSG_REGDATE, MSG_RECEIVENO, MSG_RETURNCONTS, MSG_OTHERS01, MSG_OTHER02)
		VALUES(MSG_SEQ.NEXTVAL, '[제품등록 승인 알림]', CONCAT(#{product_name},' 제품 등록이 승인되었습니다.') , SYSDATE , #{product_compno} , NULL, NULL, NULL)	
	]]>	
	
</insert>

<!-- 쪽지 전체 발송 -->
<insert id="gogomsg" parameterType="map">
	<![CDATA[
		INSERT INTO MSG (MSG_NO, MSG_TITLE, MSG_CONTS, MSG_REGDATE, MSG_RECEIVENO, MSG_RETURNCONTS, MSG_OTHERS01, MSG_OTHER02)
		VALUES(MSG_SEQ.NEXTVAL, #{msg_title} , #{msg_conts} , SYSDATE , (SELECT MEM_NO FROM MEMBERS WHERE MEM_STATUS='M' ) , NULL, NULL, NULL)	
	]]>	
	
</insert>


<!-- 2)제품 수정 승인 쪽지  -->

<insert id="sendMessage3" parameterType='tempinfoDto'>
		
	INSERT INTO MSG(MSG_NO, MSG_TITLE, MSG_CONTS, MSG_REGDATE, MSG_RECEIVENO, MSG_RETURNCONTS, MSG_OTHERS01, MSG_OTHER02)
	VALUES(MSG_SEQ.NEXTVAL, '[제품수정 승인 알림]', CONCAT(#{tempinfo_name},' 제품 수정 승인되었습니다.'), SYSDATE , (SELECT PRODUCT_COMPNO FROM PRODUCT WHERE PRODUCT_NO = #{tempinfo_no}) , NULL, NULL, NULL)
	
</insert>


<!-- 쪽지 리스트 쿼리 -->

<select id = 'msgList' resultType='msgDto' parameterType="int">
		SELECT MSG_TITLE, MSG_CONTS, MSG_REGDATE 
		FROM MSG
		WHERE MSG_RECEIVENO = #{mem_no}
</select>

 
<!-- 제품 등록 신청-->

<insert id="insertProduct" parameterType='productDto'>
INSERT INTO PRODUCT(PRODUCT_NO,PRODUCT_NAME,PRODUCT_ML,PRODUCT_PRICE,PRODUCT_CONTS,PRODUCT_COMPNO,PRODUCT_BRAND,PRODUCT_CATELNAME,PRODUCT_CATESNAME,PRODUCT_SKINTYPE,PRODUCT_SKINCONTS,PRODUCT_AGE,PRODUCT_GENDER,PRODUCT_INGRE,PRODUCT_LIKE,PRODUCT_REVIEW,PRODUCT_POINT,PRODUCT_FILENO,PRODUCT_ORIGINFILE,PRODUCT_STOREDFILE,PRODUCT_FILEREGDATE,PRODUCT_FILESIZE,PRODUCT_FLAG,PRODUCT_DJFLAG,PRODUCT_REGDATE,PRODUCT_REPLACEDATE,PRODUCT_OTHERS01,PRODUCT_OTHERS02)  
VALUES(PRODUCT_SEQ.nextval, #{product_name}, #{product_ml}, #{product_price}, #{product_conts}, #{product_compno}, (SELECT MEM_BRAND FROM MEMBERS WHERE MEM_NO=#{product_compno}), #{product_catelname}, #{product_catesname}, #{product_skintype}, NULL, #{product_age}, #{product_gender}, #{product_ingre}, NULL, NULL, NULL, PRODUCTFILE_SEQ.nextval , #{product_originfile} ,#{product_storedfile} , SYSDATE , #{product_filesize} ,'N',NULL,SYSDATE,NULL,NULL,NULL) 
</insert>

<!-- 자사 제품 목록-->

<select id = 'getProductList' resultType='productDto' parameterType="int">
		SELECT PRODUCT_NO, PRODUCT_NAME, PRODUCT_ML,PRODUCT_PRICE,PRODUCT_CONTS, PRODUCT_BRAND,PRODUCT_CATELNAME,PRODUCT_CATESNAME,PRODUCT_SKINTYPE,PRODUCT_SKINCONTS,PRODUCT_AGE,PRODUCT_GENDER,PRODUCT_INGRE,PRODUCT_FILENO,PRODUCT_ORIGINFILE,PRODUCT_STOREDFILE,PRODUCT_FILEREGDATE,PRODUCT_FILESIZE,PRODUCT_FLAG,PRODUCT_DJFLAG,PRODUCT_REGDATE, PRODUCT_REPLACEDATE, PRODUCT_OTHERS01 
		FROM PRODUCT
		WHERE PRODUCT_COMPNO = #{mem_no}
</select>

<!-- (제품등록)승인해야 할 제품 목록 -->
<select id = 'approveProductList' resultType='productDto' parameterType="Map">
		SELECT PRODUCT_NO, PRODUCT_NAME, PRODUCT_ML,PRODUCT_PRICE,PRODUCT_CONTS, PRODUCT_BRAND,PRODUCT_CATELNAME,PRODUCT_CATESNAME,PRODUCT_SKINTYPE,PRODUCT_SKINCONTS,PRODUCT_AGE,PRODUCT_GENDER,PRODUCT_INGRE,PRODUCT_FILENO,PRODUCT_ORIGINFILE,PRODUCT_STOREDFILE,PRODUCT_FILEREGDATE,PRODUCT_FILESIZE,PRODUCT_FLAG,PRODUCT_DJFLAG,PRODUCT_REGDATE,PRODUCT_COMPNO 
		FROM PRODUCT
		WHERE PRODUCT_FLAG='N'
</select>

<!-- (제품수정)승인해야 할 제품 목록 -->
<select id = 'approveProductList1' resultType='tempinfoDto' parameterType="Map">
		SELECT TEMPINFO_NO, TEMPINFO_NAME, TEMPINFO_ML,TEMPINFO_PRICE,TEMPINFO_CONTS, TEMPINFO_SKINTYPE, TEMPINFO_AGE, TEMPINFO_GENDER, TEMPINFO_INGRE, TEMPINFO_ORIGINFILE, TEMPINFO_STOREDFILE, TEMPINFO_REGDATE, TEMPINFO_FILESIZE, TEMPINFO_OTHERS01, TEMPINFO_OTHERS02 
		FROM TEMPINFO
		WHERE TEMPINFO_OTHERS01= 'N'
</select>

<!-- 제품 신청 승인하기(관리자) -->
<update id="approveProduct" parameterType="int">
		UPDATE PRODUCT SET PRODUCT_FLAG='Y' , PRODUCT_REPLACEDATE=SYSDATE 
		WHERE PRODUCT_NO = #{product_no}
	</update>
	
	
 <!--  수정할 제품 정보 가져오는 쿼리 --> 
	<select id = 'updateProductInfo' parameterType='int' resultType='productDto'>
		SELECT PRODUCT_NO, PRODUCT_NAME, PRODUCT_ML,PRODUCT_PRICE,PRODUCT_CONTS, PRODUCT_BRAND,PRODUCT_CATELNAME,PRODUCT_CATESNAME,PRODUCT_SKINTYPE,PRODUCT_SKINCONTS,PRODUCT_AGE,PRODUCT_GENDER,PRODUCT_INGRE,PRODUCT_FILENO,PRODUCT_ORIGINFILE,PRODUCT_STOREDFILE,PRODUCT_FILEREGDATE,PRODUCT_FILESIZE,PRODUCT_FLAG,PRODUCT_DJFLAG,PRODUCT_REGDATE, PRODUCT_OTHERS01 
		FROM PRODUCT 
		WHERE PRODUCT_NO = #{product_no}
	</select>
	
	
	
<!-- 제품 수정 신청 하기(기업, tempinfo에 넣기) -->	
	<insert id="tempinfoInsert" parameterType='tempinfoDto'>
	INSERT INTO TEMPINFO(TEMPINFO_NO,TEMPINFO_NAME,TEMPINFO_ML,TEMPINFO_PRICE,TEMPINFO_CONTS,TEMPINFO_SKINTYPE, TEMPINFO_AGE, TEMPINFO_GENDER, TEMPINFO_INGRE, TEMPINFO_ORIGINFILE, TEMPINFO_STOREDFILE, TEMPINFO_REGDATE, TEMPINFO_FILESIZE, TEMPINFO_OTHERS01, TEMPINFO_OTHERS02)  
	VALUES(#{tempinfo_no}, #{tempinfo_name}, #{tempinfo_ml}, #{tempinfo_price}, #{tempinfo_conts}, #{tempinfo_skintype}, #{tempinfo_age}, #{tempinfo_gender}, #{tempinfo_ingre}, #{tempinfo_originfile}, #{tempinfo_storedfile}, SYSDATE, #{tempinfo_filesize}, 'N', (SELECT PRODUCT_BRAND FROM PRODUCT WHERE PRODUCT_NO = #{tempinfo_no}) ) 
	</insert>
	
	
<!-- 제품 수정 승인하기(관리자)-->

	<update id="approveProduct1" parameterType="tempinfoDto">
		UPDATE PRODUCT SET 
		PRODUCT_NAME= #{tempinfo_name}, PRODUCT_ML=#{tempinfo_ml},PRODUCT_PRICE=#{tempinfo_price},PRODUCT_CONTS=#{tempinfo_conts},PRODUCT_SKINTYPE=#{tempinfo_skintype},PRODUCT_AGE=#{tempinfo_age},PRODUCT_GENDER=#{tempinfo_gender},PRODUCT_INGRE=#{tempinfo_ingre}, PRODUCT_OTHERS01='Y' ,  PRODUCT_ORIGINFILE=#{tempinfo_originfile} , PRODUCT_REPLACEDATE=SYSDATE <if test="tempinfo_originfile != 'empty'">, PRODUCT_STOREDFILE=#{tempinfo_storedfile} ,PRODUCT_FILEREGDATE=SYSDATE,PRODUCT_FILESIZE=#{tempinfo_filesize} </if>  
		WHERE PRODUCT_NO = #{tempinfo_no} 
	</update>
	
	
	
	<!-- 제품 수정 승인하기2 , 제품 수정 승인할 목록 볼 때, TEMPINFO_OTHERS01='N'인 것만 보려고 -->
	<update id="approveProduct2" parameterType="tempinfoDto">
		UPDATE TEMPINFO SET 
		TEMPINFO_OTHERS01='Y'
		WHERE TEMPINFO_NO = #{tempinfo_no}
	</update>
	<!-- 제품 수정 승인하기3, product_others01 = Y 로 바꿈, 수정 완료 알리려고 -->
	<update id = 'productOthersY' parameterType="tempinfoDto">
		UPDATE PRODUCT SET 
		PRODUCT_OTHERS01 = 'Y' 
		WHERE PRODUCT_NO = #{tempinfo_no}
</update>
	

<!-- 제품 단종 처리 하기 -->
<update id="productdj" parameterType="int">
		UPDATE PRODUCT SET 
		PRODUCT_DJFLAG = 'N'
		WHERE PRODUCT_NO = #{product_no}
</update>

<!-- 제품 삭제하기 -->
<delete id="productdel" parameterType="int">
		DELETE PRODUCT 
		WHERE PRODUCT_NO = #{product_no}
</delete>

<!-- 제품 삭제하면 tempinfo에 있는 제품도 함께 삭제 -->
<delete id="tempinfodel" parameterType="int">
		DELETE TEMPINFO 
		WHERE TEMPINFO_NO = #{product_no}
</delete>

<!-- tempinfoDto가져오기 -->
<select id = 'geTempinfo' resultType='tempinfoDto' parameterType="int">
		SELECT TEMPINFO_NO, TEMPINFO_NAME, TEMPINFO_ML,TEMPINFO_PRICE,TEMPINFO_CONTS, TEMPINFO_SKINTYPE, TEMPINFO_AGE, TEMPINFO_GENDER, TEMPINFO_INGRE, TEMPINFO_ORIGINFILE, TEMPINFO_STOREDFILE, TEMPINFO_REGDATE, TEMPINFO_FILESIZE, TEMPINFO_OTHERS01
		FROM TEMPINFO
		WHERE TEMPINFO_NO= #{tempinfo_no} AND TEMPINFO_REGDATE = (SELECT MAX(TEMPINFO_REGDATE) FROM TEMPINFO)
</select>

<!-- 프로덕트 리스트 가져오기-->
<select id = 'geProduct' resultType='productDto' parameterType="int">
		SELECT *  
		FROM PRODUCT 
		WHERE PRODUCT_NO= #{product_no} 
</select>

<!-- product_other01 = 'N'으로 바꿈 (수정신청 여부 알려고) -->
<update id = 'productOthersN' parameterType="tempinfoDto">
		UPDATE PRODUCT SET 
		PRODUCT_OTHERS01 = 'N' 
		WHERE PRODUCT_NO = #{tempinfo_no}
</update>




<!-- 일반 회원 목록 가져오기 -->
<select id = 'getUserList' resultType='membersDto'>
		SELECT * 
		FROM MEMBERS 
		WHERE MEM_STATUS = 'M' 
</select>

<!-- 기업 회원 목록 가져오기 -->
<select id = 'getComUserList' resultType='membersDto'>
		SELECT * 
		FROM MEMBERS 
		WHERE MEM_STATUS = 'C' 
</select>


<!-- 회원 삭제하기(완전 탈퇴시키기) -->
<delete id="userdel" parameterType="int">
		DELETE MEMBERS 
		WHERE MEM_NO = #{mem_no}
</delete>
 
 
 <!-- 기업 가입 승인 하기 (MEM_APPRFLAG = 'Y' 바꾸기)-->
 <update id = 'compAppr' parameterType="int">
		UPDATE MEMBERS SET 
		MEM_APPRFLAG = 'Y' 
		WHERE MEM_NO = #{mem_no}
</update>


<!-- 내 정보 가져오기(기업)-->

<select id = 'comInfo' resultType='membersDto' parameterType="int">
		SELECT * 
		FROM MEMBERS 
		WHERE MEM_NO= #{mem_no}
</select>


<!-- 관리자메뉴에서 회원 정보 가져오기 -->
<select id = 'infoinfo' resultType='membersDto' parameterType="int">
		SELECT * 
		FROM MEMBERS 
		WHERE MEM_NO= #{mem_no}
</select>
<!-- 기업회원 탈퇴 하기 (실제탈퇴X, 탈퇴플래그만 바꿈) -->
<update id="comtal" parameterType="int">
		UPDATE MEMBERS SET 
		MEM_DELFLAG = 'Y' , MEM_DELDATE = SYSDATE 
		WHERE MEM_NO = #{mem_no} 
</update>

<!-- 기업,일반회원 정보 수정하기 -->
<update id="infoUpdate" parameterType="membersDto">
		UPDATE MEMBERS SET 
		MEM_BRAND = #{mem_brand}, MEM_ID = #{mem_id}, MEM_PW = #{mem_pw}, MEM_NAME= #{mem_name}, MEM_EMAIL = #{mem_email}, MEM_POST = #{mem_post}, MEM_ADDR1 = #{mem_addr1}, MEM_ADDR2 = #{mem_addr2}, MEM_HOMEPAGE = #{mem_homepage}, MEM_NICK = #{mem_nick}, MEM_PHONE= #{mem_phone} 
		WHERE MEM_NO = #{mem_no} 
</update>

<!-- 내 정보 가져오기(일반회원)-->

<select id = 'userInfo' resultType='membersDto' parameterType="int">
		SELECT * 
		FROM MEMBERS 
		WHERE MEM_NO= #{mem_no} 
</select>

<!-- 내가 쓴 커뮤니티 글 목록 가져오기 -->
<select id = 'myboardlist' resultType='boardDto' parameterType="String">
		SELECT * 
		FROM BOARD 
		WHERE BOARD_NICK= #{mem_nick} 
</select>


<!-- 내가 쓴 리뷰 글 목록 가져오기 -->
<select id = 'myreviewlist' resultType='reviewDto' parameterType="String">
		SELECT * 
		FROM REVIEW 
		WHERE REVIEW_MEMBERNICK= #{mem_nick} 
</select>

<!-- 내가 쓴 댓글 목록 가져오기 -->
<select id = 'myreplylist' resultType='replyDto' parameterType="String">
		SELECT * 
		FROM REPLY  
		WHERE REPLY_NICK= #{mem_nick} 
</select>

<!-- 메인페이지 커뮤니티 조회수 높은 순으로 4개 가져오기 -->
<select id = 'mainCommuList' resultType='boardDto'>
	<![CDATA[
	SELECT * 
	FROM (SELECT * FROM BOARD ORDER BY BOARD_COUNT DESC) 
	WHERE ROWNUM <= 4 
	]]>
</select>

<!-- 메인페이지 랭킹 제품 대분류별 랭킹 1위 상품 가져오기 -->
<select id = 'mainRankList' resultType='productDto'>
<![CDATA[
SELECT *
FROM (SELECT PRODUCT_ML, PRODUCT_BRAND, PRODUCT_PRICE, PRODUCT_STOREDFILE, PRODUCT_NAME, PRODUCT_NO, PRODUCT_INGRE, PRODUCT_POINT, PRODUCT_CATELNAME, 
      ROW_NUMBER() OVER (PARTITION BY PRODUCT_CATELNAME ORDER BY PRODUCT_POINT DESC) as ranking FROM PRODUCT) a
WHERE a.ranking <= 1
]]>
</select>

<!-- 황승희 황승희 황승희 황승희 황승희 황승희 황승희 황승희 황승희 황승희 황승희 황승희 황승희 황승희 끝 -->



</mapper>